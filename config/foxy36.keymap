#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Shift {
            bindings = <&skq LEFT_SHIFT>;
            key-positions = <13 12>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        Ctrl {
            bindings = <&skq LCTRL>;
            key-positions = <12 11>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        Alt {
            bindings = <&skq LEFT_ALT>;
            key-positions = <11 10>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        Mod {
            bindings = <&skq LEFT_GUI>;
            key-positions = <22 23>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        r_Alt {
            bindings = <&skq LEFT_ALT>;
            key-positions = <16 17>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        r_Ctrl {
            bindings = <&skq LCTRL>;
            key-positions = <17 18>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        r_Shift {
            bindings = <&skq LEFT_SHIFT>;
            key-positions = <18 17>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        r_Mod {
            bindings = <&skq LEFT_GUI>;
            key-positions = <26 27>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };
    };

    behaviors {
        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            label = "SKQ";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    macros {
        bt_0: bt_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &to 0>;
            label = "BT_0";
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &to 0>;
            label = "BT_1";
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &to 0>;
            label = "BT_2";
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &to 0>;
            label = "BT_3";
        };

        bt_4: bt_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &to 0>;
            label = "BT_4";
        };

        mc_tmx_scrl: mc_tmx_scrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LC(S) &kp LEFT_BRACKET>;
            label = "MC_TMX_SCRL";
        };

        copy_linux: copy_linux {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
            label = "COPY_LINUX";
        };

        paste_linux: paste_linux {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
            label = "PASTE_LINUX";
        };

        cut_linux: cut_linux {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>;
            label = "CUT_LINUX";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp Q  &kp W  &kp F  &kp P          &kp B          &kp J    &kp L       &kp U      &kp Y       &kp SEMICOLON
&kp A  &kp R  &kp S  &kp T          &kp G          &kp M    &kp N       &kp E      &kp I       &kp O
&kp Z  &kp X  &kp C  &kp D          &kp V          &kp K    &kp H       &kp COMMA  &kp PERIOD  &kp FSLH
              &kp A  &kp BACKSPACE  &kp SPACE      &kp RET  &kp DELETE  &kp B
            >;
        };
    };
};
